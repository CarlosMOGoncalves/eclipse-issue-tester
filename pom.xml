<?xml version="1.0" encoding="UTF-8"?>
<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

	<groupId>pt.cmg.test</groupId>
    <artifactId>eclipse-issue-tester</artifactId>
    <version>1.0.0</version>
    
    <inceptionYear>2023</inceptionYear>

    <packaging>war</packaging>
    
    <developers>
        <developer>
            <id>1</id>
            <name>Carlos Gon√ßalves</name>
            <email>carlosmoliveiragoncalves@gmail.com</email>
        </developer>
    </developers>

    <properties>

        <!-- General properties -->
        <final.name>eclipse-issue-tester</final.name>
        
        <!-- General properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JAVA version -->
        <java-version>11</java-version>

        <!-- Payara version -->
        <payara-version>5.2022.3</payara-version>
        
        <aws-javasdkv2-version>2.19.13</aws-javasdkv2-version>
        
        <!-- Maven plugin versions -->
        <war-plugin-version>3.3.2</war-plugin-version>
        <clean-plugin-version>3.2.0</clean-plugin-version>
        <compiler-plugin-version>3.10.1</compiler-plugin-version>
        <deploy-plugin-version>3.0.0-M1</deploy-plugin-version>
        <install-plugin-version>3.0.0-M1</install-plugin-version>
        <resources-plugin-version>3.2.0</resources-plugin-version>
        <source-plugin-version>3.2.0</source-plugin-version>
        <surefire-plugin-version>3.0.0-M7</surefire-plugin-version>
        <surefire-reporting-plugin-version>3.0.0-M4</surefire-reporting-plugin-version>
        <failsafe-plugin-version>3.0.0-M7</failsafe-plugin-version>
        <payara-micro-plugin-version>1.4.0</payara-micro-plugin-version>


    </properties>
    
    <profiles>

        <profile>
            <!-- DEV is the standard profile, it is a testless, wild environment -->
            <id>dev</id>
            <properties>
                <skipTests>true</skipTests>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <profile>
            <id>debug</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <version>${payara-micro-plugin-version}</version>

                        <configuration>
                            <useUberJar>true</useUberJar>
                            <javaCommandLineOptions>
                                <option>
                                    <value>-Xdebug</value>
                                </option>
                                <option>
                                    <key>-Xrunjdwp:transport</key>
                                    <value>dt_socket,server=y,suspend=y,address=5005</value>
                                </option>
                            </javaCommandLineOptions>
                        </configuration>

                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
    
     <dependencyManagement>
        <dependencies>

            <!-- All of our provided dependencies actually come from the application server, this solves it all -->
            <dependency>
                <groupId>fish.payara.api</groupId>
                <artifactId>payara-bom</artifactId>
                <version>${payara-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            
            <!-- AWS SDK is heavily used due to Infra, this BOM resolves all its multiple dependencies -->
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <type>pom</type>
                <version>${aws-javasdkv2-version}</version>
                <scope>import</scope>
            </dependency>
            
		</dependencies>
    </dependencyManagement>
    
    <dependencies>
    
        <!-- Platform dependencies -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.core</artifactId>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
        </dependency>
        
    </dependencies>

    <build>
        <finalName>${final.name}</finalName>

        <plugins>

            <!-- Payara Micro bundle execution will configure the Uber JAR -->
            <plugin>
                <groupId>fish.payara.maven.plugins</groupId>
                <artifactId>payara-micro-maven-plugin</artifactId>

                <!-- An execution must be defined to activate payara plugin and create a uber jar -->
                <executions>

                    <execution>
                        <id>BUNDLE</id>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <payaraVersion>${payara-version}</payaraVersion>
                            <systemProperties>
                                <property>
                                    <name>payaramicro.port</name>
                                    <value>10000</value>
                                </property>
                            </systemProperties>
                            <appendSystemProperties>true</appendSystemProperties>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

        </plugins>
        
        <pluginManagement>
            <plugins>

                <!-- Maven Clean Plugin , used to clean up after build -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${clean-plugin-version}</version>
                </plugin>


                <!-- Maven Compiler Plugin , for JARs -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${compiler-plugin-version}</version>
                    <configuration>
                        <release>${java-version}</release>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>


                <!-- Maven Install plugin, install the build artifacts into the LOCAL repository -->
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${install-plugin-version}</version>
                </plugin>

                <!-- Maven Resources plugin, copies the resources to output directory to include in final JAR -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${resources-plugin-version}</version>
                </plugin>

                <!-- Maven WAR Plugin, for WARs -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${war-plugin-version}</version>
                    <configuration>
                        <!-- Since we are using Servlet 3+ we do not need web.xml to register JAX-RS webservices so the war plugin must not fail if it doesn't find it -->
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                        <attachClasses>true</attachClasses>
                        <classesClassifier>classes</classesClassifier>
                    </configuration>
                </plugin>

                <!-- Surefire plugin used for testing -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${surefire-plugin-version}</version>
                    <configuration>
                        <reportsDirectory>${basedir}/../ffbuild/reports</reportsDirectory>
                        <groups>${groups}</groups>
                        <skipTests>${skipTests}</skipTests>
                        <testFailureIgnore>true</testFailureIgnore>
                        <!-- argLine> illegal-access=permit </argLine -->
                    </configuration>
                </plugin>

                <!-- Failsafe plugin is used for integration test, but we are not using it yet, it is just to set the argLine for future reference -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${failsafe-plugin-version}</version>
                    <configuration>
                        <!-- argLine> illegal-access=permit </argLine -->
                    </configuration>
                </plugin>


                <!-- Payara Micro bundle execution will configure the Uber JAR -->
                <plugin>
                    <groupId>fish.payara.maven.plugins</groupId>
                    <artifactId>payara-micro-maven-plugin</artifactId>
                    <version>${payara-micro-plugin-version}</version>
                </plugin>

            </plugins>
        </pluginManagement>

    </build>

</project>